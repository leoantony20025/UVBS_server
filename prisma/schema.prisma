generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  phone        String?
  isActive     Boolean       @default(true)
  isSubscribed Boolean       @default(false)
  pid          String?
  cart         Cart?
  cartProduct  CartProduct[]
  comment      Comment[]
  like         Like[]
  orders       Order[]
  shipping     Shipping?
}

model Audio {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String
  audioUrl    String
  song        Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    String
}

model Video {
  id          String    @id @default(uuid())
  title       String
  description String
  thumbnail   String
  videoUrl    String
  theme       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likesCount  Int       @default(0)
  comments    Comment[]
  likes       Like[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  msg       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  price       Int
  stock       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  photo       String
  cartId      String?
  cartProduct CartProduct[]
  cart        Cart?         @relation(fields: [cartId], references: [id])
}

model Cart {
  id        String        @id @default(uuid())
  userId    String        @unique
  price     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  products  CartProduct[]
  Product   Product[]
}

model CartProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String?
  quantity  Int      @default(1)
  cart      Cart?    @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Shipping {
  id        String   @id @default(uuid())
  userId    String   @unique
  line1     String
  line2     String
  city      String
  state     String
  country   String
  zip       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id                     String   @id @default(uuid())
  userId                 String
  price                  Int      @default(0)
  status                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  city                   String
  country                String
  line1                  String
  line2                  String
  state                  String
  zip                    Int
  products               String
  payment_mode           String
  payment_status         String
  razorpay_order_id      String?
  razorpay_payment_id    String?
  razorpay_signature     String?
  razorpay_temp_order_id String?
  deliveryDate           DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])
}

model PreviousVideo {
  id        String   @id @default(uuid())
  title     String
  year      Int
  thumbnail String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id               String   @id @default(uuid())
  themeTitle       String
  themeDescription String
  themePhoto       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
